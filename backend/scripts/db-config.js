/**
 * Êï∞ÊçÆÂ∫ìÈÖçÁΩÆÂ∑•ÂÖ∑
 * Êèê‰æõÊô∫ËÉΩÁöÑSSLÈÖçÁΩÆÂíåËøûÊé•ÁÆ°ÁêÜ
 */

import { config } from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
config({ path: path.join(__dirname, '..', '.env') });
config({ path: path.join(__dirname, '..', '..', '.env') });

/**
 * Êô∫ËÉΩSSLÈÖçÁΩÆÊ£ÄÊµã
 * @param {string} host - Êï∞ÊçÆÂ∫ì‰∏ªÊú∫Âú∞ÂùÄ
 * @param {string|number} port - Êï∞ÊçÆÂ∫ìÁ´ØÂè£
 * @param {string} sslConfig - SSLÈÖçÁΩÆ (auto/true/false)
 * @returns {object|undefined} SSLÈÖçÁΩÆÂØπË±°Êàñundefined
 */
function getSSLConfig(host, port, sslConfig) {
  // Â¶ÇÊûúÊòéÁ°ÆÁ¶ÅÁî®SSL
  if (sslConfig === 'false' || sslConfig === false) {
    return undefined;
  }
  
  // Â¶ÇÊûúÊòéÁ°ÆÂêØÁî®SSL
  if (sslConfig === 'true' || sslConfig === true) {
    return { rejectUnauthorized: false };
  }
  
  // Ëá™Âä®Ê£ÄÊµãÊ®°Âºè (default)
  const needsSSL = 
    // ‰∫ëÊï∞ÊçÆÂ∫ìÊúçÂä°ÂïÜ
    host.includes('tidbcloud.com') ||
    host.includes('planetscale.com') ||
    host.includes('aws.amazon.com') ||
    host.includes('rds.amazonaws.com') ||
    host.includes('database.azure.com') ||
    host.includes('googleapis.com') ||
    host.includes('digitalocean.com') ||
    
    // Â∏∏ËßÅÁöÑSSLÁ´ØÂè£
    port == 3307 || port == 25060 ||
    
    // HTTPSÁ´ØÂè£
    port == 443;
  
  return needsSSL ? { rejectUnauthorized: false } : undefined;
}

/**
 * Ëé∑ÂèñÂÆåÊï¥ÁöÑÊï∞ÊçÆÂ∫ìÈÖçÁΩÆ
 * @returns {object} Êï∞ÊçÆÂ∫ìÈÖçÁΩÆÂØπË±°
 */
export function getDatabaseConfig() {
  const host = process.env.DB_HOST || 'localhost';
  const port = process.env.DB_PORT || 3306;
  const sslConfig = process.env.DB_SSL || 'auto';
  
  const config = {
    host,
    port: parseInt(port),
    user: process.env.DB_USERNAME || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_DATABASE || 'dispatch_system',
    connectTimeout: 30000,
    charset: 'utf8mb4'
  };
  
  // Ê∑ªÂä†SSLÈÖçÁΩÆ
  const ssl = getSSLConfig(host, port, sslConfig);
  if (ssl) {
    config.ssl = ssl;
  }
  
  return config;
}

/**
 * Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÈÖçÁΩÆÂπ∂ÊòæÁ§∫‰ø°ÊÅØ
 * @returns {object} Êï∞ÊçÆÂ∫ìÈÖçÁΩÆÂíåÊ£ÄÊµã‰ø°ÊÅØ
 */
export function checkDatabaseConfig() {
  const config = getDatabaseConfig();
  const info = {
    host: config.host,
    port: config.port,
    user: config.user,
    database: config.database,
    ssl: !!config.ssl,
    sslMode: process.env.DB_SSL || 'auto'
  };
  
  console.log('üìä Êï∞ÊçÆÂ∫ìÈÖçÁΩÆ‰ø°ÊÅØ:');
  console.log(`   ‰∏ªÊú∫: ${info.host}:${info.port}`);
  console.log(`   Áî®Êà∑: ${info.user}`);
  console.log(`   Êï∞ÊçÆÂ∫ì: ${info.database}`);
  console.log(`   SSL: ${info.ssl ? 'ÂêØÁî®' : 'Á¶ÅÁî®'} (Ê®°Âºè: ${info.sslMode})`);
  
  if (info.ssl) {
    console.log('   üîí Ê£ÄÊµãÂà∞ÈúÄË¶ÅSSLËøûÊé•');
  } else {
    console.log('   üîì ‰ΩøÁî®ÊôÆÈÄöËøûÊé•');
  }
  
  return { config, info };
}

// Êó•ÂøóÂ∑•ÂÖ∑
export const logger = {
  info: (msg) => console.log(`‚ÑπÔ∏è  ${msg}`),
  success: (msg) => console.log(`‚úÖ ${msg}`),
  error: (msg) => console.log(`‚ùå ${msg}`),
  warn: (msg) => console.log(`‚ö†Ô∏è  ${msg}`),
  step: (num, msg) => console.log(`\n${num}Ô∏è‚É£  ${msg}`)
};

export default getDatabaseConfig;